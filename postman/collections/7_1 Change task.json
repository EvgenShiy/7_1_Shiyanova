{
	"info": {
		"_postman_id": "5df8223f-a8bd-4391-ac49-7ee9b025d0dd",
		"name": "7_1 Change task",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "24778854-5df8223f-a8bd-4391-ac49-7ee9b025d0dd"
	},
	"item": [
		{
			"name": "create a task",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0df3ef37-55e9-41b1-a4fc-6389602caaf9",
						"exec": [
							"let jsonData = pm.response.json();",
							"pm.environment.set(\"task_id\", jsonData.id);",
							"",
							"// Проверка статус-кода ответа",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// Проверка статус-сообщения ответа",
							"pm.test(\"Task has been created successfully\", function () {",
							"    pm.expect(pm.response.status).to.eql(\"Task has been created successfully\");",
							"});",
							"",
							"// Проверка критичного содержимого тела ответа",
							"pm.test(\"Check Response Body\", function () {",
							"    var expectedFields = [\"id\", \"text\", \"answer\", \"title\"];",
							"    pm.expect(jsonData).to.have.all.keys(expectedFields);",
							"});",
							"",
							"// Проверка заголовка Content-Type",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
							"});",
							"",
							"let moment = require('moment');",
							"",
							"//получаем текущую дату",
							"var currentDate = moment.utc();",
							"console.log(\"Current Date (GMT):\", currentDate.format(\"YYYY-MM-DD HH:mm\"));",
							"//получаем дату из ответа",
							"var momentResponseDate = moment.utc(responseDate);",
							"var responseDate = pm.response.headers.get(\"Date\");",
							"console.log(\"Response Date (GMT):\", momentResponseDate.format(\"YYYY-MM-DD HH:mm\"));",
							"",
							"//сравниваем текущую дату и дату из ответа",
							"pm.test(\"Check if response date matches current date\", function () {",
							"    pm.expect(momentResponseDate.isSame(currentDate, 'day')).to.be.true;",
							"});",
							"",
							"//сравниваем текущую дату и дату из ответа",
							"pm.test(\"Check if response date matches current date\", function () {",
							"    pm.expect(momentResponseDate.isSame(currentDate, 'day')).to.be.true;",
							"});",
							"",
							"//подгружаем библиотеку chai",
							"var chai = require('chai');",
							"var expect = chai.expect;",
							"",
							"pm.test(\"Check if response date matches current date\", function () {",
							"    // Получаем значение заголовка \"Date\" из ответа",
							"    var responseDateString = pm.response.headers.get(\"Date\");",
							"",
							"    // Преобразуем значение заголовка в объект Date",
							"    var responseDate = new Date(responseDateString);",
							"",
							"    // Получаем текущую дату и время",
							"    var currentDate = new Date();",
							"",
							"    // Проверяем, что дата в заголовке ответа соответствует текущей дате",
							"    expect(responseDate.toDateString()).to.equal(currentDate.toDateString());",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c7553e44-35f0-4ac7-a4be-a8a802e7001a",
						"exec": [
							"// Получаем имя пользователя и пароль из переменных окружения\r",
							"var username = pm.variables.get('adminLogin');\r",
							"var password = pm.variables.get('adminPassword');\r",
							"\r",
							"// Отправляем запрос на аутентификацию с использованием переменных\r",
							"pm.sendRequest({\r",
							"    url: 'https://sqlverifier-staging-08050d656f7a.herokuapp.com/api/authenticate',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            \"username\": username,\r",
							"            \"password\": password,\r",
							"            \"rememberMe\": false\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.error('Ошибка в запросе на логин:', err);\r",
							"    } else {\r",
							"        // Если запрос на логин успешен, получаем токен доступа\r",
							"        var token = res.json().id_token;\r",
							"        // Устанавливаем токен в переменную окружения\r",
							"        pm.environment.set('accessToken', token);\r",
							"        console.log('Токен доступа успешно установлен:', token);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "9653c2c5-c674-4218-9a5b-496e58e7cb69",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"some text\",\n  \"answer\": \"string\",\n  \"title\": \"string\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/tasks",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "get tasks list",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "798ddabd-4a9d-4e35-9bde-6c1ec42c0bf3",
						"exec": [
							"//статус-код ответа\r",
							"pm.test(\"Response Status Code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//статус-сообщение ответа\r",
							"pm.test(\"Task information\", function () {\r",
							"    pm.response.to.have.status(\"Task information\");\r",
							"});\r",
							"\r",
							"//2-3 критичных заголовка ответа\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"//критичное содержимое тела ответа\r",
							"pm.test(\"Check Response Body\", function () {\r",
							"    var expectedFields = [\"id\", \"text\", \"answer\", \"title\"]    \r",
							"});\r",
							"\r",
							"let moment = require('moment');\r",
							"\r",
							"//получаем текущую дату\r",
							"var currentDate = moment.utc();\r",
							"console.log(\"Current Date (GMT):\", currentDate.format(\"YYYY-MM-DD HH:mm\"));\r",
							"//получаем дату из ответа\r",
							"var momentResponseDate = moment.utc(responseDate);\r",
							"var responseDate = pm.response.headers.get(\"Date\");\r",
							"console.log(\"Response Date (GMT):\", momentResponseDate.format(\"YYYY-MM-DD HH:mm\"));\r",
							"\r",
							"//сравниваем текущую дату и дату из ответа\r",
							"pm.test(\"Check if response date matches current date\", function () {\r",
							"    pm.expect(momentResponseDate.isSame(currentDate, 'day')).to.be.true;\r",
							"});\r",
							"\r",
							"//сравниваем текущую дату и дату из ответа\r",
							"pm.test(\"Check if response date matches current date\", function () {\r",
							"    pm.expect(momentResponseDate.isSame(currentDate, 'day')).to.be.true;\r",
							"});\r",
							"\r",
							"//подгружаем библиотеку chai\r",
							"var chai = require('chai');\r",
							"var expect = chai.expect;\r",
							"\r",
							"pm.test(\"Check if response date matches current date\", function () {\r",
							"    // Получаем значение заголовка \"Date\" из ответа\r",
							"    var responseDateString = pm.response.headers.get(\"Date\");\r",
							"\r",
							"    // Преобразуем значение заголовка в объект Date\r",
							"    var responseDate = new Date(responseDateString);\r",
							"\r",
							"    // Получаем текущую дату и время\r",
							"    var currentDate = new Date();\r",
							"\r",
							"    // Проверяем, что дата в заголовке ответа соответствует текущей дате\r",
							"    expect(responseDate.toDateString()).to.equal(currentDate.toDateString());\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "f1d3e606-514b-4c36-9af8-1707b5032ffb",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/tasks?page=0&size=100",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "change task text",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "11645e76-d26a-458e-8ee7-f5b5354ce811",
						"exec": [
							"//статус-код ответа\r",
							"pm.test(\"Response Status Code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//статус-сообщение ответа\r",
							"pm.test(\"Task update\", function () {\r",
							"    pm.response.to.have.status(\"Task update\");\r",
							"});\r",
							"\r",
							"//2-3 критичных заголовка ответа\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"//критичное содержимое тела ответа\r",
							"pm.test(\"Check Response Body\", function () {\r",
							"    var expectedFields = [\"id\", \"text\", \"answer\", \"title\"]    \r",
							"});\r",
							"\r",
							"let moment = require('moment');\r",
							"\r",
							"//получаем текущую дату\r",
							"var currentDate = moment.utc();\r",
							"console.log(\"Current Date (GMT):\", currentDate.format(\"YYYY-MM-DD HH:mm\"));\r",
							"\r",
							"//получаем дату из ответа\r",
							"var momentResponseDate = moment.utc(responseDate);\r",
							"var responseDate = pm.response.headers.get(\"Date\");\r",
							"console.log(\"Response Date (GMT):\", momentResponseDate.format(\"YYYY-MM-DD HH:mm\"));\r",
							"\r",
							"//сравниваем текущую дату и дату из ответа\r",
							"pm.test(\"Check if response date matches current date\", function () {\r",
							"    pm.expect(momentResponseDate.isSame(currentDate, 'day')).to.be.true;\r",
							"});\r",
							"\r",
							"//сравниваем текущую дату и дату из ответа\r",
							"pm.test(\"Check if response date matches current date\", function () {\r",
							"    pm.expect(momentResponseDate.isSame(currentDate, 'day')).to.be.true;\r",
							"});\r",
							"\r",
							"//подгружаем библиотеку chai\r",
							"var chai = require('chai');\r",
							"var expect = chai.expect;\r",
							"\r",
							"pm.test(\"Check if response date matches current date\", function () {\r",
							"    // Получаем значение заголовка \"Date\" из ответа\r",
							"    var responseDateString = pm.response.headers.get(\"Date\");\r",
							"\r",
							"    // Преобразуем значение заголовка в объект Date\r",
							"    var responseDate = new Date(responseDateString);\r",
							"\r",
							"    // Получаем текущую дату и время\r",
							"    var currentDate = new Date();\r",
							"\r",
							"    // Проверяем, что дата в заголовке ответа соответствует текущей дате\r",
							"    expect(responseDate.toDateString()).to.equal(currentDate.toDateString());\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "07f67153-eb42-4d4b-b527-adf248957222",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": {{task_id}},\n  \"text\": \"some new new text\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/tasks/{{task_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks",
						"{{task_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get task data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2747b1d0-8a30-40a5-b138-c638335eada3",
						"exec": [
							"//статус-код ответа",
							"pm.test(\"Response Status Code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//статус-сообщение ответа",
							"pm.test(\"Task information\", function () {",
							"    pm.response.to.have.status(\"Task information\");",
							"});",
							"",
							"//2-3 критичных заголовка ответа",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
							"});",
							"",
							"//критичное содержимое тела ответа",
							"pm.test(\"Check Response Body\", function () {",
							"    var expectedFields = [\"id\", \"text\", \"answer\", \"title\"]    ",
							"});",
							"",
							"let moment = require('moment');",
							"",
							"//получаем текущую дату",
							"var currentDate = moment.utc();",
							"console.log(\"Current Date (GMT):\", currentDate.format(\"YYYY-MM-DD HH:mm\"));",
							"",
							"//получаем дату из ответа",
							"var momentResponseDate = moment.utc(responseDate);",
							"var responseDate = pm.response.headers.get(\"Date\");",
							"console.log(\"Response Date (GMT):\", momentResponseDate.format(\"YYYY-MM-DD HH:mm\"));",
							"",
							"//сравниваем текущую дату и дату из ответа",
							"pm.test(\"Check if response date matches current date\", function () {",
							"    pm.expect(momentResponseDate.isSame(currentDate, 'day')).to.be.true;",
							"});",
							"",
							"//сравниваем текущую дату и дату из ответа",
							"pm.test(\"Check if response date matches current date\", function () {",
							"    pm.expect(momentResponseDate.isSame(currentDate, 'day')).to.be.true;",
							"});",
							"",
							"//подгружаем библиотеку chai",
							"var chai = require('chai');",
							"var expect = chai.expect;",
							"",
							"pm.test(\"Check if response date matches current date\", function () {",
							"    // Получаем значение заголовка \"Date\" из ответа",
							"    var responseDateString = pm.response.headers.get(\"Date\");",
							"",
							"    // Преобразуем значение заголовка в объект Date",
							"    var responseDate = new Date(responseDateString);",
							"",
							"    // Получаем текущую дату и время",
							"    var currentDate = new Date();",
							"",
							"    // Проверяем, что дата в заголовке ответа соответствует текущей дате",
							"    expect(responseDate.toDateString()).to.equal(currentDate.toDateString());",
							"});",
							"",
							"pm.sendRequest(",
							"    {url: 'https://sqlverifier-staging-08050d656f7a.herokuapp.com/api/tasks/41012',",
							"    method: 'DELETE',",
							"    header:",
							"    {'Authorization': 'Bearer ' + pm.environment.get('accessToken'),",
							"    'accept': '*/*'}",
							"    }",
							"    , function (err, response) {",
							"    console.log(response);",
							"});",
							"",
							"pm.environment.unset(\"accessToken\");",
							"pm.environment.unset(\"task_id\");",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "38165343-2713-4c3f-894d-221b275b2f5a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/tasks/{{task_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks",
						"{{task_id}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "064985c8-13a5-4be0-a9e7-817ff0aff903",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f49e4cf9-8c01-4c33-9046-c1ad30b40568",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}